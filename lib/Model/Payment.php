<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iPos integration for FileMaker 17 API
 *
 * OpenAPI description for the iPOS integration for FileMaker 17 API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace iPosExchanger\Model;

use \ArrayAccess;
use \iPosExchanger\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dato' => 'string',
        'tekst' => 'string',
        'kto_debet' => 'string',
        'kto_kredit' => 'string',
        'belb' => 'float',
        'spy_relevant' => 'string',
        'spy_done' => 'string',
        'id_lokation' => 'string',
        'spy_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'dato' => null,
        'tekst' => null,
        'kto_debet' => null,
        'kto_kredit' => null,
        'belb' => null,
        'spy_relevant' => null,
        'spy_done' => null,
        'id_lokation' => null,
        'spy_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dato' => 'dato',
        'tekst' => 'tekst',
        'kto_debet' => 'kto_debet',
        'kto_kredit' => 'kto_kredit',
        'belb' => 'BelÃ¸b',
        'spy_relevant' => 'SPY_relevant',
        'spy_done' => 'SPY_done',
        'id_lokation' => 'id_lokation',
        'spy_type' => 'spy_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dato' => 'setDato',
        'tekst' => 'setTekst',
        'kto_debet' => 'setKtoDebet',
        'kto_kredit' => 'setKtoKredit',
        'belb' => 'setBelb',
        'spy_relevant' => 'setSpyRelevant',
        'spy_done' => 'setSpyDone',
        'id_lokation' => 'setIdLokation',
        'spy_type' => 'setSpyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dato' => 'getDato',
        'tekst' => 'getTekst',
        'kto_debet' => 'getKtoDebet',
        'kto_kredit' => 'getKtoKredit',
        'belb' => 'getBelb',
        'spy_relevant' => 'getSpyRelevant',
        'spy_done' => 'getSpyDone',
        'id_lokation' => 'getIdLokation',
        'spy_type' => 'getSpyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dato'] = isset($data['dato']) ? $data['dato'] : null;
        $this->container['tekst'] = isset($data['tekst']) ? $data['tekst'] : null;
        $this->container['kto_debet'] = isset($data['kto_debet']) ? $data['kto_debet'] : null;
        $this->container['kto_kredit'] = isset($data['kto_kredit']) ? $data['kto_kredit'] : null;
        $this->container['belb'] = isset($data['belb']) ? $data['belb'] : null;
        $this->container['spy_relevant'] = isset($data['spy_relevant']) ? $data['spy_relevant'] : null;
        $this->container['spy_done'] = isset($data['spy_done']) ? $data['spy_done'] : null;
        $this->container['id_lokation'] = isset($data['id_lokation']) ? $data['id_lokation'] : null;
        $this->container['spy_type'] = isset($data['spy_type']) ? $data['spy_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dato
     *
     * @return string|null
     */
    public function getDato()
    {
        return $this->container['dato'];
    }

    /**
     * Sets dato
     *
     * @param string|null $dato dato
     *
     * @return $this
     */
    public function setDato($dato)
    {
        $this->container['dato'] = $dato;

        return $this;
    }

    /**
     * Gets tekst
     *
     * @return string|null
     */
    public function getTekst()
    {
        return $this->container['tekst'];
    }

    /**
     * Sets tekst
     *
     * @param string|null $tekst tekst
     *
     * @return $this
     */
    public function setTekst($tekst)
    {
        $this->container['tekst'] = $tekst;

        return $this;
    }

    /**
     * Gets kto_debet
     *
     * @return string|null
     */
    public function getKtoDebet()
    {
        return $this->container['kto_debet'];
    }

    /**
     * Sets kto_debet
     *
     * @param string|null $kto_debet kto_debet
     *
     * @return $this
     */
    public function setKtoDebet($kto_debet)
    {
        $this->container['kto_debet'] = $kto_debet;

        return $this;
    }

    /**
     * Gets kto_kredit
     *
     * @return string|null
     */
    public function getKtoKredit()
    {
        return $this->container['kto_kredit'];
    }

    /**
     * Sets kto_kredit
     *
     * @param string|null $kto_kredit kto_kredit
     *
     * @return $this
     */
    public function setKtoKredit($kto_kredit)
    {
        $this->container['kto_kredit'] = $kto_kredit;

        return $this;
    }

    /**
     * Gets belb
     *
     * @return float|null
     */
    public function getBelb()
    {
        return $this->container['belb'];
    }

    /**
     * Sets belb
     *
     * @param float|null $belb belb
     *
     * @return $this
     */
    public function setBelb($belb)
    {
        $this->container['belb'] = $belb;

        return $this;
    }

    /**
     * Gets spy_relevant
     *
     * @return string|null
     */
    public function getSpyRelevant()
    {
        return $this->container['spy_relevant'];
    }

    /**
     * Sets spy_relevant
     *
     * @param string|null $spy_relevant spy_relevant
     *
     * @return $this
     */
    public function setSpyRelevant($spy_relevant)
    {
        $this->container['spy_relevant'] = $spy_relevant;

        return $this;
    }

    /**
     * Gets spy_done
     *
     * @return string|null
     */
    public function getSpyDone()
    {
        return $this->container['spy_done'];
    }

    /**
     * Sets spy_done
     *
     * @param string|null $spy_done spy_done
     *
     * @return $this
     */
    public function setSpyDone($spy_done)
    {
        $this->container['spy_done'] = $spy_done;

        return $this;
    }

    /**
     * Gets id_lokation
     *
     * @return string|null
     */
    public function getIdLokation()
    {
        return $this->container['id_lokation'];
    }

    /**
     * Sets id_lokation
     *
     * @param string|null $id_lokation id_lokation
     *
     * @return $this
     */
    public function setIdLokation($id_lokation)
    {
        $this->container['id_lokation'] = $id_lokation;

        return $this;
    }

    /**
     * Gets spy_type
     *
     * @return string|null
     */
    public function getSpyType()
    {
        return $this->container['spy_type'];
    }

    /**
     * Sets spy_type
     *
     * @param string|null $spy_type spy_type
     *
     * @return $this
     */
    public function setSpyType($spy_type)
    {
        $this->container['spy_type'] = $spy_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


