<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iPos integration for FileMaker 17 API
 *
 * OpenAPI description for the iPOS integration for FileMaker 17 API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace iPosExchanger\Model;

use \ArrayAccess;
use \iPosExchanger\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ean_nr' => 'string',
        'varetekst' => 'string',
        'vare_beskrivelse' => 'string',
        'varenr_leverandr' => 'string',
        'salgspris' => 'string',
        'salgspris_incl_moms' => 'string',
        'kostpris' => 'string',
        'kostpris_dkk' => 'string',
        'avance_i_kr' => 'string',
        'id_varegruppe' => 'string',
        'lager_status_nskes' => 'string',
        'color' => 'string',
        'size' => 'string',
        'moms_sats' => 'string',
        'saeson' => 'string',
        'producent_navn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ean_nr' => null,
        'varetekst' => null,
        'vare_beskrivelse' => null,
        'varenr_leverandr' => null,
        'salgspris' => null,
        'salgspris_incl_moms' => null,
        'kostpris' => null,
        'kostpris_dkk' => null,
        'avance_i_kr' => null,
        'id_varegruppe' => null,
        'lager_status_nskes' => null,
        'color' => null,
        'size' => null,
        'moms_sats' => null,
        'saeson' => null,
        'producent_navn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'ean_nr' => 'EAN nr',
        'varetekst' => 'Varetekst',
        'vare_beskrivelse' => 'VareBeskrivelse',
        'varenr_leverandr' => 'Varenr_Leverandør',
        'salgspris' => 'Salgspris',
        'salgspris_incl_moms' => 'Salgspris Incl moms',
        'kostpris' => 'Kostpris',
        'kostpris_dkk' => 'kostpris_DKK',
        'avance_i_kr' => 'Avance i Kr',
        'id_varegruppe' => 'ID_varegruppe',
        'lager_status_nskes' => 'Lager Status ønskes',
        'color' => 'Color',
        'size' => 'Size',
        'moms_sats' => 'Moms_sats',
        'saeson' => 'Saeson',
        'producent_navn' => 'Producent_navn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ean_nr' => 'setEanNr',
        'varetekst' => 'setVaretekst',
        'vare_beskrivelse' => 'setVareBeskrivelse',
        'varenr_leverandr' => 'setVarenrLeverandr',
        'salgspris' => 'setSalgspris',
        'salgspris_incl_moms' => 'setSalgsprisInclMoms',
        'kostpris' => 'setKostpris',
        'kostpris_dkk' => 'setKostprisDkk',
        'avance_i_kr' => 'setAvanceIKr',
        'id_varegruppe' => 'setIdVaregruppe',
        'lager_status_nskes' => 'setLagerStatusNskes',
        'color' => 'setColor',
        'size' => 'setSize',
        'moms_sats' => 'setMomsSats',
        'saeson' => 'setSaeson',
        'producent_navn' => 'setProducentNavn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ean_nr' => 'getEanNr',
        'varetekst' => 'getVaretekst',
        'vare_beskrivelse' => 'getVareBeskrivelse',
        'varenr_leverandr' => 'getVarenrLeverandr',
        'salgspris' => 'getSalgspris',
        'salgspris_incl_moms' => 'getSalgsprisInclMoms',
        'kostpris' => 'getKostpris',
        'kostpris_dkk' => 'getKostprisDkk',
        'avance_i_kr' => 'getAvanceIKr',
        'id_varegruppe' => 'getIdVaregruppe',
        'lager_status_nskes' => 'getLagerStatusNskes',
        'color' => 'getColor',
        'size' => 'getSize',
        'moms_sats' => 'getMomsSats',
        'saeson' => 'getSaeson',
        'producent_navn' => 'getProducentNavn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ean_nr'] = isset($data['ean_nr']) ? $data['ean_nr'] : null;
        $this->container['varetekst'] = isset($data['varetekst']) ? $data['varetekst'] : null;
        $this->container['vare_beskrivelse'] = isset($data['vare_beskrivelse']) ? $data['vare_beskrivelse'] : null;
        $this->container['varenr_leverandr'] = isset($data['varenr_leverandr']) ? $data['varenr_leverandr'] : null;
        $this->container['salgspris'] = isset($data['salgspris']) ? $data['salgspris'] : null;
        $this->container['salgspris_incl_moms'] = isset($data['salgspris_incl_moms']) ? $data['salgspris_incl_moms'] : null;
        $this->container['kostpris'] = isset($data['kostpris']) ? $data['kostpris'] : null;
        $this->container['kostpris_dkk'] = isset($data['kostpris_dkk']) ? $data['kostpris_dkk'] : null;
        $this->container['avance_i_kr'] = isset($data['avance_i_kr']) ? $data['avance_i_kr'] : null;
        $this->container['id_varegruppe'] = isset($data['id_varegruppe']) ? $data['id_varegruppe'] : null;
        $this->container['lager_status_nskes'] = isset($data['lager_status_nskes']) ? $data['lager_status_nskes'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['moms_sats'] = isset($data['moms_sats']) ? $data['moms_sats'] : null;
        $this->container['saeson'] = isset($data['saeson']) ? $data['saeson'] : null;
        $this->container['producent_navn'] = isset($data['producent_navn']) ? $data['producent_navn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID (= EAN)
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ean_nr
     *
     * @return string|null
     */
    public function getEanNr()
    {
        return $this->container['ean_nr'];
    }

    /**
     * Sets ean_nr
     *
     * @param string|null $ean_nr EAN code
     *
     * @return $this
     */
    public function setEanNr($ean_nr)
    {
        $this->container['ean_nr'] = $ean_nr;

        return $this;
    }

    /**
     * Gets varetekst
     *
     * @return string|null
     */
    public function getVaretekst()
    {
        return $this->container['varetekst'];
    }

    /**
     * Sets varetekst
     *
     * @param string|null $varetekst Style Name  + Color + Size (+Assortment)
     *
     * @return $this
     */
    public function setVaretekst($varetekst)
    {
        $this->container['varetekst'] = $varetekst;

        return $this;
    }

    /**
     * Gets vare_beskrivelse
     *
     * @return string|null
     */
    public function getVareBeskrivelse()
    {
        return $this->container['vare_beskrivelse'];
    }

    /**
     * Sets vare_beskrivelse
     *
     * @param string|null $vare_beskrivelse Type + Category + Quality + Weight + Country
     *
     * @return $this
     */
    public function setVareBeskrivelse($vare_beskrivelse)
    {
        $this->container['vare_beskrivelse'] = $vare_beskrivelse;

        return $this;
    }

    /**
     * Gets varenr_leverandr
     *
     * @return string|null
     */
    public function getVarenrLeverandr()
    {
        return $this->container['varenr_leverandr'];
    }

    /**
     * Sets varenr_leverandr
     *
     * @param string|null $varenr_leverandr Style No
     *
     * @return $this
     */
    public function setVarenrLeverandr($varenr_leverandr)
    {
        $this->container['varenr_leverandr'] = $varenr_leverandr;

        return $this;
    }

    /**
     * Gets salgspris
     *
     * @return string|null
     */
    public function getSalgspris()
    {
        return $this->container['salgspris'];
    }

    /**
     * Sets salgspris
     *
     * @param string|null $salgspris Sales Price
     *
     * @return $this
     */
    public function setSalgspris($salgspris)
    {
        $this->container['salgspris'] = $salgspris;

        return $this;
    }

    /**
     * Gets salgspris_incl_moms
     *
     * @return string|null
     */
    public function getSalgsprisInclMoms()
    {
        return $this->container['salgspris_incl_moms'];
    }

    /**
     * Sets salgspris_incl_moms
     *
     * @param string|null $salgspris_incl_moms Sales price including taxes
     *
     * @return $this
     */
    public function setSalgsprisInclMoms($salgspris_incl_moms)
    {
        $this->container['salgspris_incl_moms'] = $salgspris_incl_moms;

        return $this;
    }

    /**
     * Gets kostpris
     *
     * @return string|null
     */
    public function getKostpris()
    {
        return $this->container['kostpris'];
    }

    /**
     * Sets kostpris
     *
     * @param string|null $kostpris Engross Price customer currency
     *
     * @return $this
     */
    public function setKostpris($kostpris)
    {
        $this->container['kostpris'] = $kostpris;

        return $this;
    }

    /**
     * Gets kostpris_dkk
     *
     * @return string|null
     */
    public function getKostprisDkk()
    {
        return $this->container['kostpris_dkk'];
    }

    /**
     * Sets kostpris_dkk
     *
     * @param string|null $kostpris_dkk Engross Price DKK
     *
     * @return $this
     */
    public function setKostprisDkk($kostpris_dkk)
    {
        $this->container['kostpris_dkk'] = $kostpris_dkk;

        return $this;
    }

    /**
     * Gets avance_i_kr
     *
     * @return string|null
     */
    public function getAvanceIKr()
    {
        return $this->container['avance_i_kr'];
    }

    /**
     * Sets avance_i_kr
     *
     * @param string|null $avance_i_kr round(sales price - cost price, 2)
     *
     * @return $this
     */
    public function setAvanceIKr($avance_i_kr)
    {
        $this->container['avance_i_kr'] = $avance_i_kr;

        return $this;
    }

    /**
     * Gets id_varegruppe
     *
     * @return string|null
     */
    public function getIdVaregruppe()
    {
        return $this->container['id_varegruppe'];
    }

    /**
     * Sets id_varegruppe
     *
     * @param string|null $id_varegruppe Spy Group ID
     *
     * @return $this
     */
    public function setIdVaregruppe($id_varegruppe)
    {
        $this->container['id_varegruppe'] = $id_varegruppe;

        return $this;
    }

    /**
     * Gets lager_status_nskes
     *
     * @return string|null
     */
    public function getLagerStatusNskes()
    {
        return $this->container['lager_status_nskes'];
    }

    /**
     * Sets lager_status_nskes
     *
     * @param string|null $lager_status_nskes Always set to 1
     *
     * @return $this
     */
    public function setLagerStatusNskes($lager_status_nskes)
    {
        $this->container['lager_status_nskes'] = $lager_status_nskes;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets moms_sats
     *
     * @return string|null
     */
    public function getMomsSats()
    {
        return $this->container['moms_sats'];
    }

    /**
     * Sets moms_sats
     *
     * @param string|null $moms_sats VAT
     *
     * @return $this
     */
    public function setMomsSats($moms_sats)
    {
        $this->container['moms_sats'] = $moms_sats;

        return $this;
    }

    /**
     * Gets saeson
     *
     * @return string|null
     */
    public function getSaeson()
    {
        return $this->container['saeson'];
    }

    /**
     * Sets saeson
     *
     * @param string|null $saeson Season
     *
     * @return $this
     */
    public function setSaeson($saeson)
    {
        $this->container['saeson'] = $saeson;

        return $this;
    }

    /**
     * Gets producent_navn
     *
     * @return string|null
     */
    public function getProducentNavn()
    {
        return $this->container['producent_navn'];
    }

    /**
     * Sets producent_navn
     *
     * @param string|null $producent_navn Brand
     *
     * @return $this
     */
    public function setProducentNavn($producent_navn)
    {
        $this->container['producent_navn'] = $producent_navn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


