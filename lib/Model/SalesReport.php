<?php
/**
 * SalesReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iPos integration for FileMaker 17 API
 *
 * OpenAPI description for the iPOS integration for FileMaker 17 API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace iPosExchanger\Model;

use \ArrayAccess;
use \iPosExchanger\ObjectSerializer;

/**
 * SalesReport Class Doc Comment
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'antal' => 'string',
        'ean' => 'string',
        'spy_a_pris' => 'string',
        'ui_dato_bon' => 'string',
        'lg_ikke_p_lager' => 'string',
        'spy_relevant' => 'string',
        'spy_done' => 'string',
        'id_lokation' => 'string',
        'tax_state_amount' => 'string',
        'tax_city_amount' => 'string',
        'tax_state_rate' => 'string',
        'tax_city_rate' => 'string',
        'spy_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'antal' => null,
        'ean' => null,
        'spy_a_pris' => null,
        'ui_dato_bon' => null,
        'lg_ikke_p_lager' => null,
        'spy_relevant' => null,
        'spy_done' => null,
        'id_lokation' => null,
        'tax_state_amount' => null,
        'tax_city_amount' => null,
        'tax_state_rate' => null,
        'tax_city_rate' => null,
        'spy_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'antal' => 'Antal',
        'ean' => 'ean',
        'spy_a_pris' => 'SPY_a_pris',
        'ui_dato_bon' => 'UI_dato_bon',
        'lg_ikke_p_lager' => 'Læg_ikke_på_lager',
        'spy_relevant' => 'SPY_relevant',
        'spy_done' => 'SPY_done',
        'id_lokation' => 'id_lokation',
        'tax_state_amount' => 'tax_state_amount',
        'tax_city_amount' => 'tax_city_amount',
        'tax_state_rate' => 'tax_state_rate',
        'tax_city_rate' => 'tax_city_rate',
        'spy_id' => 'SPY_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'antal' => 'setAntal',
        'ean' => 'setEan',
        'spy_a_pris' => 'setSpyAPris',
        'ui_dato_bon' => 'setUiDatoBon',
        'lg_ikke_p_lager' => 'setLgIkkePLager',
        'spy_relevant' => 'setSpyRelevant',
        'spy_done' => 'setSpyDone',
        'id_lokation' => 'setIdLokation',
        'tax_state_amount' => 'setTaxStateAmount',
        'tax_city_amount' => 'setTaxCityAmount',
        'tax_state_rate' => 'setTaxStateRate',
        'tax_city_rate' => 'setTaxCityRate',
        'spy_id' => 'setSpyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'antal' => 'getAntal',
        'ean' => 'getEan',
        'spy_a_pris' => 'getSpyAPris',
        'ui_dato_bon' => 'getUiDatoBon',
        'lg_ikke_p_lager' => 'getLgIkkePLager',
        'spy_relevant' => 'getSpyRelevant',
        'spy_done' => 'getSpyDone',
        'id_lokation' => 'getIdLokation',
        'tax_state_amount' => 'getTaxStateAmount',
        'tax_city_amount' => 'getTaxCityAmount',
        'tax_state_rate' => 'getTaxStateRate',
        'tax_city_rate' => 'getTaxCityRate',
        'spy_id' => 'getSpyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['antal'] = isset($data['antal']) ? $data['antal'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['spy_a_pris'] = isset($data['spy_a_pris']) ? $data['spy_a_pris'] : null;
        $this->container['ui_dato_bon'] = isset($data['ui_dato_bon']) ? $data['ui_dato_bon'] : null;
        $this->container['lg_ikke_p_lager'] = isset($data['lg_ikke_p_lager']) ? $data['lg_ikke_p_lager'] : null;
        $this->container['spy_relevant'] = isset($data['spy_relevant']) ? $data['spy_relevant'] : null;
        $this->container['spy_done'] = isset($data['spy_done']) ? $data['spy_done'] : null;
        $this->container['id_lokation'] = isset($data['id_lokation']) ? $data['id_lokation'] : null;
        $this->container['tax_state_amount'] = isset($data['tax_state_amount']) ? $data['tax_state_amount'] : null;
        $this->container['tax_city_amount'] = isset($data['tax_city_amount']) ? $data['tax_city_amount'] : null;
        $this->container['tax_state_rate'] = isset($data['tax_state_rate']) ? $data['tax_state_rate'] : null;
        $this->container['tax_city_rate'] = isset($data['tax_city_rate']) ? $data['tax_city_rate'] : null;
        $this->container['spy_id'] = isset($data['spy_id']) ? $data['spy_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets antal
     *
     * @return string|null
     */
    public function getAntal()
    {
        return $this->container['antal'];
    }

    /**
     * Sets antal
     *
     * @param string|null $antal antal
     *
     * @return $this
     */
    public function setAntal($antal)
    {
        $this->container['antal'] = $antal;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets spy_a_pris
     *
     * @return string|null
     */
    public function getSpyAPris()
    {
        return $this->container['spy_a_pris'];
    }

    /**
     * Sets spy_a_pris
     *
     * @param string|null $spy_a_pris spy_a_pris
     *
     * @return $this
     */
    public function setSpyAPris($spy_a_pris)
    {
        $this->container['spy_a_pris'] = $spy_a_pris;

        return $this;
    }

    /**
     * Gets ui_dato_bon
     *
     * @return string|null
     */
    public function getUiDatoBon()
    {
        return $this->container['ui_dato_bon'];
    }

    /**
     * Sets ui_dato_bon
     *
     * @param string|null $ui_dato_bon ui_dato_bon
     *
     * @return $this
     */
    public function setUiDatoBon($ui_dato_bon)
    {
        $this->container['ui_dato_bon'] = $ui_dato_bon;

        return $this;
    }

    /**
     * Gets lg_ikke_p_lager
     *
     * @return string|null
     */
    public function getLgIkkePLager()
    {
        return $this->container['lg_ikke_p_lager'];
    }

    /**
     * Sets lg_ikke_p_lager
     *
     * @param string|null $lg_ikke_p_lager lg_ikke_p_lager
     *
     * @return $this
     */
    public function setLgIkkePLager($lg_ikke_p_lager)
    {
        $this->container['lg_ikke_p_lager'] = $lg_ikke_p_lager;

        return $this;
    }

    /**
     * Gets spy_relevant
     *
     * @return string|null
     */
    public function getSpyRelevant()
    {
        return $this->container['spy_relevant'];
    }

    /**
     * Sets spy_relevant
     *
     * @param string|null $spy_relevant spy_relevant
     *
     * @return $this
     */
    public function setSpyRelevant($spy_relevant)
    {
        $this->container['spy_relevant'] = $spy_relevant;

        return $this;
    }

    /**
     * Gets spy_done
     *
     * @return string|null
     */
    public function getSpyDone()
    {
        return $this->container['spy_done'];
    }

    /**
     * Sets spy_done
     *
     * @param string|null $spy_done spy_done
     *
     * @return $this
     */
    public function setSpyDone($spy_done)
    {
        $this->container['spy_done'] = $spy_done;

        return $this;
    }

    /**
     * Gets id_lokation
     *
     * @return string|null
     */
    public function getIdLokation()
    {
        return $this->container['id_lokation'];
    }

    /**
     * Sets id_lokation
     *
     * @param string|null $id_lokation id_lokation
     *
     * @return $this
     */
    public function setIdLokation($id_lokation)
    {
        $this->container['id_lokation'] = $id_lokation;

        return $this;
    }

    /**
     * Gets tax_state_amount
     *
     * @return string|null
     */
    public function getTaxStateAmount()
    {
        return $this->container['tax_state_amount'];
    }

    /**
     * Sets tax_state_amount
     *
     * @param string|null $tax_state_amount tax_state_amount
     *
     * @return $this
     */
    public function setTaxStateAmount($tax_state_amount)
    {
        $this->container['tax_state_amount'] = $tax_state_amount;

        return $this;
    }

    /**
     * Gets tax_city_amount
     *
     * @return string|null
     */
    public function getTaxCityAmount()
    {
        return $this->container['tax_city_amount'];
    }

    /**
     * Sets tax_city_amount
     *
     * @param string|null $tax_city_amount tax_city_amount
     *
     * @return $this
     */
    public function setTaxCityAmount($tax_city_amount)
    {
        $this->container['tax_city_amount'] = $tax_city_amount;

        return $this;
    }

    /**
     * Gets tax_state_rate
     *
     * @return string|null
     */
    public function getTaxStateRate()
    {
        return $this->container['tax_state_rate'];
    }

    /**
     * Sets tax_state_rate
     *
     * @param string|null $tax_state_rate tax_state_rate
     *
     * @return $this
     */
    public function setTaxStateRate($tax_state_rate)
    {
        $this->container['tax_state_rate'] = $tax_state_rate;

        return $this;
    }

    /**
     * Gets tax_city_rate
     *
     * @return string|null
     */
    public function getTaxCityRate()
    {
        return $this->container['tax_city_rate'];
    }

    /**
     * Sets tax_city_rate
     *
     * @param string|null $tax_city_rate tax_city_rate
     *
     * @return $this
     */
    public function setTaxCityRate($tax_city_rate)
    {
        $this->container['tax_city_rate'] = $tax_city_rate;

        return $this;
    }

    /**
     * Gets spy_id
     *
     * @return string|null
     */
    public function getSpyId()
    {
        return $this->container['spy_id'];
    }

    /**
     * Sets spy_id
     *
     * @param string|null $spy_id spy_id
     *
     * @return $this
     */
    public function setSpyId($spy_id)
    {
        $this->container['spy_id'] = $spy_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


